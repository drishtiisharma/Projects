{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nconst useBackgroundAnimation = canvasRef => {\n  _s();\n  const animationFrameId = useRef(null);\n  const particles = useRef([]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    const particleCount = 50;\n\n    // Set canvas size\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    // Particle class\n    class Particle {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        this.size = Math.random() * 3 + 1;\n        this.speedX = Math.random() * 3 - 1.5;\n        this.speedY = Math.random() * 3 - 1.5;\n        this.color = `hsl(${Math.random() * 360}, 70%, 60%)`;\n      }\n      update() {\n        this.x += this.speedX;\n        this.y += this.speedY;\n        if (this.x > canvas.width || this.x < 0) {\n          this.speedX = -this.speedX;\n        }\n        if (this.y > canvas.height || this.y < 0) {\n          this.speedY = -this.speedY;\n        }\n      }\n      draw() {\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n\n    // Create particles\n    particles.current = [];\n    for (let i = 0; i < particleCount; i++) {\n      particles.current.push(new Particle());\n    }\n\n    // Animation loop\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      for (let i = 0; i < particles.current.length; i++) {\n        particles.current[i].update();\n        particles.current[i].draw();\n\n        // Connect particles with lines\n        for (let j = i; j < particles.current.length; j++) {\n          const dx = particles.current[i].x - particles.current[j].x;\n          const dy = particles.current[i].y - particles.current[j].y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance < 100) {\n            ctx.beginPath();\n            ctx.strokeStyle = `rgba(255, 255, 255, ${0.2 - distance / 500})`;\n            ctx.lineWidth = 0.5;\n            ctx.moveTo(particles.current[i].x, particles.current[i].y);\n            ctx.lineTo(particles.current[j].x, particles.current[j].y);\n            ctx.stroke();\n          }\n        }\n      }\n      animationFrameId.current = requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Cleanup function\n    return () => {\n      cancelAnimationFrame(animationFrameId.current);\n      window.removeEventListener('resize', resizeCanvas);\n    };\n  }, [canvasRef]);\n};\n_s(useBackgroundAnimation, \"xGU+8RU76OgQRYY+rylgTCkv6PU=\");\nexport default useBackgroundAnimation;","map":{"version":3,"names":["useEffect","useRef","useBackgroundAnimation","canvasRef","_s","animationFrameId","particles","canvas","current","ctx","getContext","particleCount","resizeCanvas","width","window","innerWidth","height","innerHeight","addEventListener","Particle","constructor","x","Math","random","y","size","speedX","speedY","color","update","draw","fillStyle","beginPath","arc","PI","fill","i","push","animate","clearRect","length","j","dx","dy","distance","sqrt","strokeStyle","lineWidth","moveTo","lineTo","stroke","requestAnimationFrame","cancelAnimationFrame","removeEventListener"],"sources":["C:/Users/HP/Desktop/Github-Projects/Projects/Anime-Filter-App/src/hooks/useBackgroundAnimation.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\n\r\nconst useBackgroundAnimation = (canvasRef) => {\r\n  const animationFrameId = useRef(null);\r\n  const particles = useRef([]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    const particleCount = 50;\r\n\r\n    // Set canvas size\r\n    const resizeCanvas = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n    // Particle class\r\n    class Particle {\r\n      constructor() {\r\n        this.x = Math.random() * canvas.width;\r\n        this.y = Math.random() * canvas.height;\r\n        this.size = Math.random() * 3 + 1;\r\n        this.speedX = Math.random() * 3 - 1.5;\r\n        this.speedY = Math.random() * 3 - 1.5;\r\n        this.color = `hsl(${Math.random() * 360}, 70%, 60%)`;\r\n      }\r\n\r\n      update() {\r\n        this.x += this.speedX;\r\n        this.y += this.speedY;\r\n\r\n        if (this.x > canvas.width || this.x < 0) {\r\n          this.speedX = -this.speedX;\r\n        }\r\n        if (this.y > canvas.height || this.y < 0) {\r\n          this.speedY = -this.speedY;\r\n        }\r\n      }\r\n\r\n      draw() {\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\r\n        ctx.fill();\r\n      }\r\n    }\r\n\r\n    // Create particles\r\n    particles.current = [];\r\n    for (let i = 0; i < particleCount; i++) {\r\n      particles.current.push(new Particle());\r\n    }\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      for (let i = 0; i < particles.current.length; i++) {\r\n        particles.current[i].update();\r\n        particles.current[i].draw();\r\n\r\n        // Connect particles with lines\r\n        for (let j = i; j < particles.current.length; j++) {\r\n          const dx = particles.current[i].x - particles.current[j].x;\r\n          const dy = particles.current[i].y - particles.current[j].y;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n          if (distance < 100) {\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = `rgba(255, 255, 255, ${0.2 - distance / 500})`;\r\n            ctx.lineWidth = 0.5;\r\n            ctx.moveTo(particles.current[i].x, particles.current[i].y);\r\n            ctx.lineTo(particles.current[j].x, particles.current[j].y);\r\n            ctx.stroke();\r\n          }\r\n        }\r\n      }\r\n\r\n      animationFrameId.current = requestAnimationFrame(animate);\r\n    };\r\n\r\n    animate();\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      cancelAnimationFrame(animationFrameId.current);\r\n      window.removeEventListener('resize', resizeCanvas);\r\n    };\r\n  }, [canvasRef]);\r\n};\r\n\r\nexport default useBackgroundAnimation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}