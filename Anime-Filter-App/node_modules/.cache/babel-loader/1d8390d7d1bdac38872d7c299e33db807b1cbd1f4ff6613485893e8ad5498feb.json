{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\Github-Projects\\\\Projects\\\\Anime-Filter-App\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport BackgroundAnimation from './components/BackgroundAnimation';\nimport FileUpload from './components/FileUpload';\nimport AnimeList from './components/AnimeList';\nimport Stats from './components/Stats';\nimport { processFile } from './utils/fileParser';\nimport { filterAnimeList } from './utils/animeFilter';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [animeList, setAnimeList] = useState([]);\n  const [filteredList, setFilteredList] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const handleFileProcess = async file => {\n    setIsProcessing(true);\n    try {\n      const content = await processFile(file);\n      const filtered = filterAnimeList(content);\n      setAnimeList(content);\n      setFilteredList(filtered);\n    } catch (error) {\n      console.error('Error processing file:', error);\n      alert('Error processing file. Please try again.');\n    }\n    setIsProcessing(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(BackgroundAnimation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"app-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Anime Filter App\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Upload your anime list to filter out movies, OVAs, and other extras\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n        onFileProcess: handleFileProcess,\n        isProcessing: isProcessing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), filteredList.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Stats, {\n          originalCount: animeList.length,\n          filteredCount: filteredList.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(AnimeList, {\n          items: filteredList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ByofpMwMBUctKCOgWgSRXtqYpVU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BackgroundAnimation","FileUpload","AnimeList","Stats","processFile","filterAnimeList","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","animeList","setAnimeList","filteredList","setFilteredList","isProcessing","setIsProcessing","handleFileProcess","file","content","filtered","error","console","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onFileProcess","length","originalCount","filteredCount","items","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/Github-Projects/Projects/Anime-Filter-App/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport BackgroundAnimation from './components/BackgroundAnimation';\r\nimport FileUpload from './components/FileUpload';\r\nimport AnimeList from './components/AnimeList';\r\nimport Stats from './components/Stats';\r\nimport { processFile } from './utils/fileParser';\r\nimport { filterAnimeList } from './utils/animeFilter';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [animeList, setAnimeList] = useState([]);\r\n  const [filteredList, setFilteredList] = useState([]);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  const handleFileProcess = async (file) => {\r\n    setIsProcessing(true);\r\n    try {\r\n      const content = await processFile(file);\r\n      const filtered = filterAnimeList(content);\r\n      setAnimeList(content);\r\n      setFilteredList(filtered);\r\n    } catch (error) {\r\n      console.error('Error processing file:', error);\r\n      alert('Error processing file. Please try again.');\r\n    }\r\n    setIsProcessing(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <BackgroundAnimation />\r\n      <div className=\"app-content\">\r\n        <header className=\"app-header\">\r\n          <h1>Anime Filter App</h1>\r\n          <p>Upload your anime list to filter out movies, OVAs, and other extras</p>\r\n        </header>\r\n        \r\n        <FileUpload onFileProcess={handleFileProcess} isProcessing={isProcessing} />\r\n        \r\n        {filteredList.length > 0 && (\r\n          <>\r\n            <Stats originalCount={animeList.length} filteredCount={filteredList.length} />\r\n            <AnimeList items={filteredList} />\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}