{"ast":null,"code":"export const processFile = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      const content = e.target.result;\n      let animeList = [];\n      const fileType = file.name.split('.').pop().toLowerCase();\n      if (fileType === 'txt') {\n        animeList = content.split('\\n').filter(line => line.trim() !== '');\n      } else if (fileType === 'html' || fileType === 'xml') {\n        // Create a temporary DOM parser to extract anime titles\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(content, 'text/html');\n        const animeElements = doc.querySelectorAll('anime');\n        animeList = Array.from(animeElements).map(el => el.textContent.trim());\n      } else {\n        reject(new Error('Unsupported file type'));\n        return;\n      }\n      resolve(animeList);\n    };\n    reader.onerror = () => {\n      reject(new Error('Failed to read file'));\n    };\n    reader.readAsText(file);\n  });\n};","map":{"version":3,"names":["processFile","file","Promise","resolve","reject","reader","FileReader","onload","e","content","target","result","animeList","fileType","name","split","pop","toLowerCase","filter","line","trim","parser","DOMParser","doc","parseFromString","animeElements","querySelectorAll","Array","from","map","el","textContent","Error","onerror","readAsText"],"sources":["C:/Users/HP/Desktop/Github-Projects/Projects/Anime-Filter-App/src/utils/fileParser.js"],"sourcesContent":["export const processFile = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    \r\n    reader.onload = (e) => {\r\n      const content = e.target.result;\r\n      let animeList = [];\r\n      \r\n      const fileType = file.name.split('.').pop().toLowerCase();\r\n      \r\n      if (fileType === 'txt') {\r\n        animeList = content.split('\\n').filter(line => line.trim() !== '');\r\n      } else if (fileType === 'html' || fileType === 'xml') {\r\n        // Create a temporary DOM parser to extract anime titles\r\n        const parser = new DOMParser();\r\n        const doc = parser.parseFromString(content, 'text/html');\r\n        const animeElements = doc.querySelectorAll('anime');\r\n        animeList = Array.from(animeElements).map(el => el.textContent.trim());\r\n      } else {\r\n        reject(new Error('Unsupported file type'));\r\n        return;\r\n      }\r\n      \r\n      resolve(animeList);\r\n    };\r\n    \r\n    reader.onerror = () => {\r\n      reject(new Error('Failed to read file'));\r\n    };\r\n    \r\n    reader.readAsText(file);\r\n  });\r\n};"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAIC,IAAI,IAAK;EACnC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAE/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;MACrB,MAAMC,OAAO,GAAGD,CAAC,CAACE,MAAM,CAACC,MAAM;MAC/B,IAAIC,SAAS,GAAG,EAAE;MAElB,MAAMC,QAAQ,GAAGZ,IAAI,CAACa,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAEzD,IAAIJ,QAAQ,KAAK,KAAK,EAAE;QACtBD,SAAS,GAAGH,OAAO,CAACM,KAAK,CAAC,IAAI,CAAC,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;MACpE,CAAC,MAAM,IAAIP,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,KAAK,EAAE;QACpD;QACA,MAAMQ,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;QAC9B,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACf,OAAO,EAAE,WAAW,CAAC;QACxD,MAAMgB,aAAa,GAAGF,GAAG,CAACG,gBAAgB,CAAC,OAAO,CAAC;QACnDd,SAAS,GAAGe,KAAK,CAACC,IAAI,CAACH,aAAa,CAAC,CAACI,GAAG,CAACC,EAAE,IAAIA,EAAE,CAACC,WAAW,CAACX,IAAI,CAAC,CAAC,CAAC;MACxE,CAAC,MAAM;QACLhB,MAAM,CAAC,IAAI4B,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC1C;MACF;MAEA7B,OAAO,CAACS,SAAS,CAAC;IACpB,CAAC;IAEDP,MAAM,CAAC4B,OAAO,GAAG,MAAM;MACrB7B,MAAM,CAAC,IAAI4B,KAAK,CAAC,qBAAqB,CAAC,CAAC;IAC1C,CAAC;IAED3B,MAAM,CAAC6B,UAAU,CAACjC,IAAI,CAAC;EACzB,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}